---
- name: Deploying New Application
  hosts: localhost
  connection: local
  vars:
    app_name: ""
    container_name: ""
    image_url: ""
    project_name: ""
    oc_token: ""
    oc_server: ""
    replicas: 1
    port: 8080

  tasks:
    - name: Log in to OpenShift
      command: oc login --token={{ oc_token }} --server={{ oc_server }}
      register: login_result
      changed_when: false
      failed_when: login_result.rc != 0

    - name: Check if deployment exists
      command: >
        oc get deployment {{ app_name }}
        --namespace={{ project_name }}
      register: deployment_check
      ignore_errors: true
      changed_when: false

    - name: Create or Update deployment
      block:
        - name: Create a new deployment
          command: >
            oc create deployment {{ app_name }}
            --image={{ image_url }}
            --namespace={{ project_name }}
          when: deployment_check.rc != 0
          register: deployment_create
          failed_when: deployment_create.rc != 0
          changed_when: "'created' in deployment_create.stdout"

        - name: Update existing deployment
          command: >
            oc set image deployment/{{ app_name }} {{ container_name }}={{ image_url }}
            --namespace={{ project_name }}
          when: deployment_check.rc == 0
          register: deployment_update
          failed_when: deployment_update.rc != 0
          changed_when: "'updated' in deployment_update.stdout"
      rescue:
        - name: Debug deployment failure
          debug:
            msg: "Failed to create or update deployment: {{ deployment_check.stderr }}"

    - name: Check if service exists
      command: >
        oc get service {{ app_name }}-svc
        --namespace={{ project_name }}
      register: service_check
      ignore_errors: true
      changed_when: false

    - name: Expose the deployment as a service
      command: >
        oc expose deployment {{ app_name }}
        --port={{ port }}
        --name={{ app_name }}-svc
        --namespace={{ project_name }}
      when: service_check.rc != 0
      register: service_result
      ignore_errors: true
      changed_when: "'created' in service_result.stdout"

    - name: Check if route exists
      command: >
        oc get route {{ app_name }}-route
        --namespace={{ project_name }}
      register: route_check
      ignore_errors: true
      changed_when: false

    - name: Create a route to expose the application to external traffic
      command: >
        oc expose svc/{{ app_name }}-svc
        --name={{ app_name }}-route
        --namespace={{ project_name }}
      when: route_check.rc != 0
      register: route_result
      ignore_errors: true
      changed_when: "'created' in route_result.stdout"

    - name: Scale the application to desired replicas
      command: >
        oc scale deployment/{{ app_name }}
        --replicas={{ replicas }}
        -n {{ project_name }}